# -*- coding: utf-8 -*-
"""**BlobStorage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_aPVOCWJ2yNNX9nMifuk78P6PgEyZjr

##  Install Azure Blob Storage
"""

pip install --upgrade pip
pip --version
pip install azure-storage-blob==12.2.0

"""## Mount Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""## Copy Storage Account Connection String"""

!export AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=v1storagev2;AccountKey=Qhtmy6iVI5U0gd2pjGJPt0wyMQcl5lyxet7CREZL1Z+uuXSeaTSqTcbOiqLvHmKWBmMQAaIOhXau3R/pAFHvQQ==;EndpointSuffix=core.windows.net"

"""## import libralies"""

import os, uuid
from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient

AZURE_STORAGE_CONNECTION_STRING="DefaultEndpointsProtocol=https;AccountName=v1storagev2;AccountKey=Qhtmy6iVI5U0gd2pjGJPt0wyMQcl5lyxet7CREZL1Z+uuXSeaTSqTcbOiqLvHmKWBmMQAaIOhXau3R/pAFHvQQ==;EndpointSuffix=core.windows.net"

connect_str = (AZURE_STORAGE_CONNECTION_STRING)

# Create the BlobServiceClient object which will be used to create a container client
blob_service_client = BlobServiceClient.from_connection_string(connect_str)

# Create a unique name for the container
container_name = "quickstart" + str(uuid.uuid4())

# Create the container
container_client = blob_service_client.create_container(container_name)

print(container_name)

# Write text to the file.
file = open(full_path_to_file,  'w')
file.write("Hello, World! Blob")
file.close()

# Create Sample folder if it not exists, and create a file in folder Sample to test the upload and download.
local_path = ("./")

if not os.path.exists(local_path):
    os.makedirs(os.path.expanduser("~/Sample"))
    
local_file_name = "QuickStartTest_" + str(uuid.uuid4()) + ".txt"
full_path_to_file = os.path.join(local_path, local_file_name)

# Write text to the file.
file = open(full_path_to_file,  'w')
file.write("Hello, World! Blob1")
file.close()

print(full_path_to_file)


# full_path_to_file = ("./README.md ")
# print(full_path_to_file)
# !ls

# Upload the created file, use local_file_name for the blob name
blob_client = blob_service_client.get_blob_client(
    container=container_name, blob=full_path_to_file)

# Upload the created file
with open(full_path_to_file, "rb") as data:
    blob_client.upload_blob(data)

print("Temp file = " + full_path_to_file)
print("\nUploading to Blob storage as blob " + full_path_to_file)

# Create a blob client using the local file name as the name for the blob
blob_client = blob_service_client.get_blob_client(container=container_name, blob=full_path_to_file)

print("\nUpload to the container name is:\n\t" + container_name)
print("\nUploading to Azure Storage as blob:\n\t" + full_path_to_file)

# List the blobs in the container
print("\nList blobs in the container")
container = blob_service_client.get_container_client(container=container_name)
generator = container.list_blobs()
for blob in generator:
    print("\t Blob name: " + blob.name)

# Download the blob(s).
# Add '_DOWNLOADED' as prefix to '.txt' so you can see both files in Documents.
# import os

full_path_to_file2 = os.path.join(local_path, str.replace(
    local_file_name ,'.txt', '_DOWNLOADED.txt'))
print("\nDownloading blob to " + full_path_to_file2)
with open(full_path_to_file2, "wb") as my_blob:
    my_blob.writelines([blob_client.download_blob().readall()])

"""## Confirm"""

import sys


sys.stdout.write("Data finished running. When you hit <any key>, the sample will be deleted and the data "
                      "application will exit.")
sys.stdout.flush()
input()

"""## Clean up resources. This includes the container and the temp files"""

import sys
# Clean up resources. This includes the container and the temp files
print("Container name {} \ntemp file {} \nand file name {} are already deleted".format(container_name ,full_path_to_file, full_path_to_file2))
blob_service_client.delete_container(container_name)
os.remove(full_path_to_file)
os.remove(full_path_to_file2)

